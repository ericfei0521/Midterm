{"version":3,"sources":["component/todoInput.jsx","component/todoListItem.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoInput","addList","title","useState","name","setName","show","setShow","className","type","onChange","e","target","value","onClick","id","nanoid","TodoItem","editList","deleteList","lists","setLists","onDragEnd","result","destination","source","index","newarr","Array","from","splice","remove","droppableId","provided","ref","innerRef","droppableProps","map","list","draggableId","toString","p","draggableProps","dragHandleProps","placeholder","cardtitle","App","newTodos","i","length","arr","filter","task","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.084efde4.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { nanoid } from 'nanoid'\r\nimport '../style/input.css'\r\nfunction TodoInput({ addList, title }) {\r\n  let [name, setName] = useState()\r\n  let [show, setShow] = useState(false)\r\n  return (\r\n    <div>\r\n      {show ? (\r\n        <div className=\"input\">\r\n          <div className=\"submit\">\r\n          <input  type=\"text\" onChange={(e) => setName(e.target.value)} value={name} />\r\n          <button\r\n            onClick={() => {\r\n              addList({\r\n                id: nanoid(),\r\n                name: name,\r\n              })\r\n              setName('')\r\n              setShow(false)\r\n            }}\r\n          >\r\n            Submit\r\n          </button>\r\n          <button className=\" danger\" onClick={() => setShow(false)}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"input\">\r\n          <button  onClick={() => setShow(true)}>\r\n            {title}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoInput\r\n","import React, { useState } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport TodoInput from './todoInput'\r\nimport '../style/list.css'\r\nconst TodoItem = ({ title,id,editList,deleteList}) => {\r\n  let [lists, setLists] = useState([])\r\n  let [name,setName] = useState(title)\r\n  let [show,setShow] = useState(false)\r\n  const addList = (cardtitle) => {\r\n    if(cardtitle.name){\r\n      setLists([...lists, cardtitle])\r\n    }\r\n  }\r\n  const handleList = ()=>{\r\n    setShow(!show)\r\n  }\r\n\r\n  function handleDrag (result){\r\n     if(!result.destination){\r\n       return\r\n     }else if (result.destination === result.source.index){\r\n       return\r\n     }else{\r\n       const newarr = Array.from(lists)\r\n       const [remove] = newarr.splice(result.source.index,1)\r\n       newarr.splice(result.destination.index,0,remove)\r\n       setLists(newarr)\r\n     }\r\n  }\r\n  return (\r\n    <div className=\"list\">\r\n            {show ? (\r\n        <div>\r\n          <input type=\"text\" onChange={(e) => setName(e.target.value)} value={name} />\r\n          <button onClick={()=>{setShow(false);editList(name,id)}}>\r\n            Edit\r\n          </button>\r\n          <button className=\"danger\" onClick={() =>deleteList(id)}>Delete</button>\r\n        </div>\r\n      ) : (\r\n        <h1 onClick={handleList}>{title}</h1>\r\n      )}\r\n\r\n      <DragDropContext onDragEnd={handleDrag}>\r\n        <Droppable droppableId=\"List\">\r\n          {(provided) => (\r\n            <div className=\"listcontent\" ref={provided.innerRef} {...provided.droppableProps}>\r\n              {lists.map((list, index) => (\r\n                <Draggable draggableId={index.toString()} index={index}>\r\n                  { p => (\r\n                    <div key={list.id} className=\"listItem\" \r\n                    {...p.draggableProps} \r\n                    {...p.dragHandleProps} \r\n                    ref={p.innerRef}>\r\n                    <h2>{list.name}</h2>\r\n                    </div>\r\n                  )}\r\n                </Draggable>\r\n              ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext>\r\n\r\n      <TodoInput addList={addList} title=\"Add Card\" />\r\n    </div>\r\n  )\r\n}\r\nexport default TodoItem\r\n","import React, { useState } from 'react'\r\n\r\nimport TodoInput from './component/todoInput'\r\nimport TodoItem from './component/todoListItem'\r\n\r\nimport './style/all.css'\r\n\r\nfunction App() {\r\n  let [lists, setLists] = useState([])\r\n  const addList = (title) => {\r\n    if (title.name) {\r\n      setLists([...lists, title])\r\n    }\r\n  }\r\n  const editList = (title, id) => {\r\n    let newTodos = [...lists]\r\n    for (let i = 0; i < newTodos.length; i++) {\r\n      if (newTodos[i].id === id) {\r\n        newTodos[i].name = title\r\n      }\r\n    }\r\n    if (title) {\r\n      setLists(newTodos)\r\n    }\r\n  }\r\n  const deleteList = (id) => {\r\n    let arr = [...lists].filter((task) => task.id !== id)\r\n    setLists(arr)\r\n  }\r\n  return (\r\n    <div className=\"all\">\r\n      <div className=\"inputarea\">\r\n        <TodoInput addList={addList} title=\"Addlist\" />\r\n      </div>\r\n      <div className=\"listplace\">\r\n        {lists.map((list) => (\r\n          <TodoItem title={list.name} id={list.id} editList={editList} deleteList={deleteList} key={list.id} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style/reset.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}